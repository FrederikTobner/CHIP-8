#####################################################
# Breakout game                                     #
# Registers:                                        #
# V0 - ball x position                              #
# V1 - ball y position                              #
# V2 - ball x direction                             #
# V3 - ball y direction                             #
# V4 - paddle y position                            #
# V5 - bars left counter                            #
# VD - temp storage                                 #   
# VE - temp storage                                 #
#####################################################
section .text:
    # Setting up bricks
    MOV V1 0x00                         # Initialize y-coordinate of the sprites
    MOV I 0x900                         # We store 0x900 (location of paddle sprite) in the register I
    # for (y = 0; y < 9; y+=3) {
_drawLine:
        MOV V0 0x00
        # for (x = 0; x < 63; x+=7) {      
_drawBrick:
            DSP V0 V1 0x01              # Draw brick at location x/y
            ADD V0 0x07
        # }
        SKE V0 0x3f                     # Last brick in row ? (V0 == 63)
        JMP drawBrick
        ADD V1 0x03
    # } 
    SKE V1 0x09                         # Last row ? (third row)
    JMP drawLine
    MOV V1 0x1d
    MOV V0 0x03
    MOV V2 0x01 # 0 -> right
    MOV V3 0x01 # 1 -> up
    MOV V5 0x18 # 24 bricks left
_gameloop: 
    # Main game loop
    MOV I 0x901
    DSP V0 V1 0x01                      # Render ball at (x: V0, y V1)
    MOV I 0x900
    MOV VE 0x1f                        
    DSP V4 VE 0x01                      # Render paddle
    # Setting up timer
    MOV VE 0x10
    MOV DT VE    
_waitForFrame: 
    # Check timer
    MOV VE DT
    SKE VE 0x00
    JMP waitForFrame
    MOV I 0x901
    DSP V0 V1 0x01                      # clear ball
    MOV I 0x900
    MOV VE 0x1f
    DSP V4 VE 0x01                      # clear paddle
    # Determine ball movement x and y
    SKE V2 0x00
    SUB V0 V2
    SKNE V2 0x00
    ADD V0 0x01
    SKE V3 0x00
    SUB V1 V3
    SKNE V3 0x00
    ADD V1 0x01  
    # Detect collisions  
    SKNE V0 0x00
    MOV V2 0x00
    SKNE V0 0x3f
    MOV V2 0x01
    SKNE V1 0x00
    MOV V3 0x00
    SKNE V1 0x1f
    EXT
    # Handle input
    MOV VD 0x01
    MOV VE 0x0A
    SKNP VE
    SUB V4 VD
    MOV VE 0x0F
    SKNP VE
    ADD V4 0x01
    JMP gameloop
    
    # TODO:
    # Handle ball collisions - bricks
    # Handle ball collisions - paddle
    # Loop back to Main Game loop if there are some bars still left to destroy
    # Game over

section .data:
    org 0x900
    0xfc                                # Paddle and brick sprite
    0x80                                # Ball sprite
